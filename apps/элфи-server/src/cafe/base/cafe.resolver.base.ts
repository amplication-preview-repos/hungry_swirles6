/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cafe } from "./Cafe";
import { CafeCountArgs } from "./CafeCountArgs";
import { CafeFindManyArgs } from "./CafeFindManyArgs";
import { CafeFindUniqueArgs } from "./CafeFindUniqueArgs";
import { DeleteCafeArgs } from "./DeleteCafeArgs";
import { CafeService } from "../cafe.service";
@graphql.Resolver(() => Cafe)
export class CafeResolverBase {
  constructor(protected readonly service: CafeService) {}

  async _cafesMeta(
    @graphql.Args() args: CafeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cafe])
  async cafes(@graphql.Args() args: CafeFindManyArgs): Promise<Cafe[]> {
    return this.service.cafes(args);
  }

  @graphql.Query(() => Cafe, { nullable: true })
  async cafe(@graphql.Args() args: CafeFindUniqueArgs): Promise<Cafe | null> {
    const result = await this.service.cafe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cafe)
  async deleteCafe(@graphql.Args() args: DeleteCafeArgs): Promise<Cafe | null> {
    try {
      return await this.service.deleteCafe(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
